/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/renault-trafic-van.clean.glb -k -o src/components/trafic.jsx -r public 
*/

import React, { useState, useRef, useEffect } from 'react'
import { useGLTF, Html } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import * as THREE from 'three'
import { InspectionPopup } from './InspectionPopup' // Importer le composant InspectionPopup

export function Trafic(props) {
  const { nodes, materials } = useGLTF(`${import.meta.env.BASE_URL}models/renault-trafic-van.clean.glb`)
  const [selectedObject, setSelectedObject] = useState(null)
  const [objectStatus, setObjectStatus] = useState({}) // État pour stocker le statut et les commentaires des objets
  const raycaster = useRef(new THREE.Raycaster())
  const mouse = useRef(new THREE.Vector2())
  const meshRef = useRef()

  const { camera, gl } = useThree()

  useEffect(() => {
    // Matériau pour les vitres
    materials.windowglass.transparent = true
    materials.windowglass.opacity = 0.3 // Ajustez selon vos préférences
    materials.windowglass.depthWrite = false

    materials.whiteglass.transparent = true
    materials.whiteglass.opacity = 0.5
    materials.whiteglass.depthWrite = false

    materials.whiteglassfrosted.transparent = true
    materials.whiteglassfrosted.opacity = 0.5
    materials.whiteglassfrosted.depthWrite = false

    materials.redglass.transparent = true
    materials.redglass.opacity = 0.5
    materials.redglass.depthWrite = false
  }, [])

  // Fonction pour gérer le double-clic
  const handleDoubleClick = (event) => {
    event.preventDefault()
    event.stopPropagation()

    // Calculer les coordonnées de la souris
    const rect = gl.domElement.getBoundingClientRect()
    mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1
    mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1

    raycaster.current.setFromCamera(mouse.current, camera)
    const intersects = raycaster.current.intersectObjects(meshRef.current.children, true)

    if (intersects.length > 0) {
      const intersectedObject = intersects[0].object
      const objectName = intersectedObject.name

      setSelectedObject({
        object: intersectedObject,
        name: objectName,
      })
    } else {
      // Si on double-clique en dehors du modèle, fermer la popup
      setSelectedObject(null)
    }
  }

  useEffect(() => {
    gl.domElement.addEventListener('dblclick', handleDoubleClick)

    return () => {
      gl.domElement.removeEventListener('dblclick', handleDoubleClick)
    }
  }, [gl.domElement])

  // Mettre à jour les couleurs des objets en fonction de leur statut et de la sélection
  useEffect(() => {
    if (meshRef.current) {
      meshRef.current.traverse((child) => {
        if (child.isMesh) {
          const status = objectStatus[child.name]
          const isSelected = selectedObject && selectedObject.name === child.name

          if (isSelected) {
            // Si l'objet est sélectionné, le griser
            if (!child.userData.originalMaterial) {
              child.userData.originalMaterial = child.material
              child.material = child.material.clone()
            }
            child.material.color.set('gray')
          } else if (status) {
            // Si l'objet a un statut, définir sa couleur en conséquence
            if (
              status.state === 'broken' ||
              status.state === 'scratched' ||
              status.state === 'crashed' ||
              status.state === 'flat'
            ) {
              if (!child.userData.originalMaterial) {
                child.userData.originalMaterial = child.material
                child.material = child.material.clone()
              }
              child.material.color.set('red')
            } else if (status.comment && status.comment.trim() !== '') {
              if (!child.userData.originalMaterial) {
                child.userData.originalMaterial = child.material
                child.material = child.material.clone()
              }
              child.material.color.set('orange')
            } else {
              // Si l'état est "undamaged" et pas de commentaire, réinitialiser le matériel
              if (child.userData.originalMaterial) {
                child.material.dispose()
                child.material = child.userData.originalMaterial
                delete child.userData.originalMaterial
              }
            }
          } else {
            // Pas de statut et non sélectionné, réinitialiser le matériel
            if (child.userData.originalMaterial) {
              child.material.dispose()
              child.material = child.userData.originalMaterial
              delete child.userData.originalMaterial
            }
          }
        }
      })
    }
  }, [objectStatus, selectedObject]) // Ajouter selectedObject aux dépendances

  // Fonction pour gérer la soumission du statut
  const handleStatusChange = (name, state, comment) => {
    setObjectStatus((prevStatus) => ({
      ...prevStatus,
      [name]: {
        state,
        comment,
      },
    }))
    setSelectedObject(null)
  }

  return (
    <>
      <group ref={meshRef} {...props} dispose={null}>
        <mesh
          name="RearDoor_L"
          geometry={nodes.PorteArriere_G.geometry}
          material={materials.carpaint_white.clone()}
          rotation={[Math.PI / 2, 0, 0]}
        >
          <group
            name="BrakeLights_Central"
            rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              name="BrakeLights_Bulb_Central"
              geometry={nodes.FeuxFreinage_Ampoule_Central.geometry}
              material={materials.whiteglass}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_Frame_Central"
              geometry={nodes.FeuxFreinage_Cadre_Central.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_Reflector_Central"
              geometry={nodes.FeuxFreinage_Reflecteur_Central.geometry}
              material={materials.chrome}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_Glass_Central"
              geometry={nodes.FeuxFreinage_Verre_Central.geometry}
              material={materials.redglass}
              rotation={[Math.PI / 2, 0, 0]} />
          </group>
          <mesh
            name="RearDoor_Hinges_L"
            geometry={nodes.PorteArriere_Gonds_G.geometry}
            material={materials.carpaint_white} />
          <mesh
            name="RearDoor_Handle_L"
            geometry={nodes.PorteArriere_Poignee_G.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="RearDoor_Handle_Lock_L"
            geometry={nodes.PorteArriere_Poignee_Serrure_G.geometry}
            material={materials.chrome} />
          <mesh
            name="RearLicensePlateProtection"
            geometry={nodes.ProtectionPlaqueImmatArriere.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="TRAFIC"
            geometry={nodes.TRAFIC.geometry}
            material={materials.chrome} />
        </mesh>
        <mesh
          name="SideDoor"
          geometry={nodes.PorteLatérale.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="SideDoor_Bottom"
            geometry={nodes.BasDePorte_Lateral.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="SideDoor_Handle"
            geometry={nodes.PorteLateral_Poignee.geometry}
            material={materials.matteplastic_midblack} />
        </mesh>
        <mesh
          name="FrontDoor_R"
          geometry={nodes.PorteAvant_D.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <group
            name="Mirror_R"
            rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              name="Mirror_Base_R"
              geometry={nodes.Retroviseur_Base_D.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Cover_R"
              geometry={nodes.Retroviseur_Cache_D.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Glass_R"
              geometry={nodes.RetroViseur_Miroir_D.geometry}
              material={materials.mirror}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Support_R"
              geometry={nodes.Retroviseur_SupportMiroir_D.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
          </group>
          <mesh
            name="FrontDoor_Bottom_R"
            geometry={nodes.BasDePorte_Avant_D.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="FrontDoor_Handle_R"
            geometry={nodes.PorteAvant_Poignee_D.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="FrontDoor_WindowSeal_R"
            geometry={nodes.PorteAvant_Vitre_Joint_d.geometry}
            material={materials.rubber} />
          <mesh
            name="FrontDoor_R_Windows"
            geometry={nodes.PorteAvantD_Vitres.geometry}
            material={materials.windowglass} />
        </mesh>
        <mesh
          name="FrontSideReflector_Base"
          geometry={nodes.ReflecteurLaterauxAvant_Base.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="FrontSideReflector_Bulbs"
            geometry={nodes.ReflecteursLaterauxAvant_Ampoules.geometry}
            material={materials.whiteglass} />
          <mesh
            name="FrontSideReflector_InnerFrame"
            geometry={nodes.ReflecteursLaterauxAvant_CadreInterieur.geometry}
            material={materials.chrome} />
          <mesh
            name="FrontSideReflector_Reflector"
            geometry={nodes.ReflecteursLaterauxAvant_Reflecteur.geometry}
            material={materials.chrome} />
          <mesh
            name="FrontSideReflector_Glass"
            geometry={nodes.ReflecteursLaterauxAvant_Verre.geometry}
            material={materials.whiteglass} />
        </mesh>
        <mesh
          name="FrontDoor_L"
          geometry={nodes.PorteAvant_G.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <group
            name="Mirror_L"
            rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              name="Mirror_Base_L"
              geometry={nodes.Retroviseur_Base_G.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Cover_L"
              geometry={nodes.Retroviseur_Cache_G.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Glass_L"
              geometry={nodes.Retroviseur_Miroir_G.geometry}
              material={materials.mirror}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="Mirror_Support_L"
              geometry={nodes.Retroviseur_SupportMiroir_G.geometry}
              material={materials.matteplastic_midblack}
              rotation={[Math.PI / 2, 0, 0]} />
          </group>
          <mesh
            name="FrontDoor_Bottom_L"
            geometry={nodes.BasDePorte_Avant_G.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="FrontDoor_Handle_L"
            geometry={nodes.PorteAvant_Poignee_G.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="FrontDoor_WindowSeal_L"
            geometry={nodes.PorteAvant_Vitre_Joint_G.geometry}
            material={materials.rubber} />
          <mesh
            name="FrontDoor_L_Windows"
            geometry={nodes.PorteAvantG_Vitres.geometry}
            material={materials.windowglass} />
        </mesh>
        <mesh
          name="RearDoor_R"
          geometry={nodes.PorteArriere_D.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="RearDoor_Hinges_R"
            geometry={nodes.PorteArriere_Gonds_D.geometry}
            material={materials.carpaint_white} />
          <mesh
            name="RENAULT"
            geometry={nodes.RENAULT.geometry}
            material={materials.chrome} />
        </mesh>
        <mesh
          name="Antenna"
          geometry={nodes.Antenne.geometry}
          material={materials.plastic_glossy}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Sideskirts"
          geometry={nodes.BasDeCaisse.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="DoorBottom_Body"
          geometry={nodes.BasDePorte_Carrosserie.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RoofHatchMounts_Covers"
          geometry={nodes.CachesFixationsHayonToit.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Rear"
          geometry={nodes.Carrosserie_Arriere.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_DoorBottom"
          geometry={nodes.Carrosserie_BasDePorte.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Hood"
          geometry={nodes.Carrosserie_Capot.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_TopOfBody"
          geometry={nodes.Carrosserie_DessusCaisse.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Fenders_Rear"
          geometry={nodes.Carrosserie_Fenders_Arriere.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Fenders_Front"
          geometry={nodes.Carrosserie_Fenders_Avant.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Side"
          geometry={nodes.Carrosserie_Laterale.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Bodywork_Roof"
          geometry={nodes.Carrosserie_Toit.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Interior"
          geometry={nodes.Interieur.geometry}
          material={materials.leather}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Logo_Base"
          geometry={nodes.Logo_Base.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="Logo_Center"
            geometry={nodes.Logo_Centre.geometry}
            material={materials.plastic_grey} />
          <mesh
            name="Logo_Renault"
            geometry={nodes.Logo_Renault.geometry}
            material={materials.chrome} />
        </mesh>
        <mesh
          name="RearBumper"
          geometry={nodes.PareChocArriere.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <group
            name="BrakeLights_Bumper"
            rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              name="BrakeLights_Bulbs_Bumper"
              geometry={nodes.FeuxFreinage_Ampoules_Parechoc.geometry}
              material={materials.whiteglass}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_InnerFrame_Bumper"
              geometry={nodes.FeuxFreinage_CadreInterieur_PareChoc.geometry}
              material={materials.chrome}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_Reflector_Bumper"
              geometry={nodes.FeuxFreinage_Reflecteur_PareChoc.geometry}
              material={materials.chrome}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="BrakeLights_Glass_Bumper"
              geometry={nodes.FeuxFreinage_Verre_PareChoc.geometry}
              material={materials.redglass}
              rotation={[Math.PI / 2, 0, 0]} />
          </group>
          <mesh
            name="RearBumper_Step"
            geometry={nodes.PareChocArriere_MarchePied.geometry}
            material={materials.carpaint_white} />
        </mesh>
        <mesh
          name="FrontBumper"
          geometry={nodes.PareChocAvant.geometry}
          material={materials.carpaint_white}
          rotation={[Math.PI / 2, 0, 0]}>
          <group
            name="FogLights"
            rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              name="FogLight_Bulb"
              geometry={nodes.AntiBrouillard_Ampoule.geometry}
              material={materials.whiteglass}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="FogLight_Lens"
              geometry={nodes.AntiBrouillard_Lentille.geometry}
              material={materials.chrome}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="FogLight_Reflectors"
              geometry={nodes.AntiBrouillard_Reflecteurs.geometry}
              material={materials.chrome}
              rotation={[Math.PI / 2, 0, 0]} />
            <mesh
              name="FogLight_Glass"
              geometry={nodes.AntiBrouillard_Verre.geometry}
              material={materials.whiteglassfrosted}
              rotation={[Math.PI / 2, 0, 0]} />
          </group>
          <mesh
            name="AirDeflectorFrontLower_Surround"
            geometry={nodes.DeflecteurAirAvantBas_Contour.geometry}
            material={materials.matteplastic_midblack}>
            <mesh
              name="AirDeflectorFrontLower_Grill"
              geometry={nodes.DeflecteurAirAvantBas_Grille.geometry}
              material={materials.plastic_glossy} />
            <mesh
              name="AirDeflectorFrontLower_Radiator"
              geometry={nodes.DeflecteurAirAvantBas_Radiateur.geometry}
              material={materials.plastic_glossy} />
          </mesh>
          <mesh
            name="FrontBumper_FogLight_Cover"
            geometry={nodes.PareChocAvant_AntiBrouillard_Cache.geometry}
            material={materials.matteplastic_midblack} />
          <mesh
            name="FrontBumper_Mudguard"
            geometry={nodes.PareChocAvant_Bavette.geometry}
            material={materials.matteplastic_midblack} />
        </mesh>
        <mesh
          name="SideDoor_Runner"
          geometry={nodes.PorteLaterale_Glissiere.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearProtections"
          geometry={nodes.ProtectionsArrieres.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="RearProtections_Bolts"
            geometry={nodes.ProtectionsArrieres_boulons.geometry}
            material={materials.matteplastic_midblack} />
        </mesh>
        <mesh
          name="Mirror_Covers"
          geometry={nodes.Retroviseurs_Caches.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="AirDeflectorFrontUpper_Chrome"
          geometry={nodes.DeflecteurAirAvantHaut_Chrome.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="AirDeflectorFrontUpper_Surround"
          geometry={nodes.DeflecteurAirAvantHaut_Contour.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="AirDeflectorFrontUpper_Grill1"
          geometry={nodes.DeflecteurAirAvantHaut_Grille1.geometry}
          material={materials.plastic_glossy}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="AirDeflectorFrontUpper_Grill2"
          geometry={nodes.DeflecteurAirAvantHaut_Grille2.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_Bulb_Bottom"
          geometry={nodes.FeuxArrieres_Ampoule_Bas.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_BulbRed_Bottom"
          geometry={nodes.FeuxArrieres_AmpouleRouge_Bas.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_Reflectors_Bottom"
          geometry={nodes.FeuxArrieres_Reflecteurs_Bas.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_Glass_Bottom"
          geometry={nodes.FeuxArrieres_Verre_Bas.geometry}
          material={materials.whiteglassfrosted}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_GlassRed_Bottom"
          geometry={nodes.FeuxArrieres_VerreRouge_Bas.geometry}
          material={materials.redglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_BulbWhite_Top"
          geometry={nodes.FeuxArrieres_AmpouleBlanc_Haut.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_BulbRed_Top"
          geometry={nodes.FeuxArrieres_AmpouleRouge_Haut.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_Reflectors_Top"
          geometry={nodes.FeuxArrieres_Reflecteurs_Haut.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_Glass_Top"
          geometry={nodes.FeuxArrieres_Verre_Haut.geometry}
          material={materials.whiteglassfrosted}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearLights_GlassRed_Top"
          geometry={nodes.FeuxArrieres_VerreRouge_Haut.geometry}
          material={materials.redglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Headlights_PlasticSupport"
          geometry={nodes.FeuxAvant_SupportPlastique.geometry}
          material={materials.plastic_glossy}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Headlights_Lens"
          geometry={nodes['FeuxAvants-Lentille'].geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Headlights_Bulb1"
          geometry={nodes.FeuxAvants_Ampoule1.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Headlights_Bulb2"
          geometry={nodes.FeuxAvants_Ampoule2.geometry}
          material={materials.whiteglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <group
          name="Headlights_Reflectors"
          rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            name="072-0-72"
            geometry={nodes['072-0-72'].geometry}
            material={materials.mattemetal_white} />
          <mesh
            name="072-0-72_1"
            geometry={nodes['072-0-72_1'].geometry}
            material={materials.chrome} />
        </group>
        <mesh
          name="Headlights_Glass"
          geometry={nodes.FeuxAvants_Verre.geometry}
          material={materials.whiteglassfrosted}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="WindshieldWipers"
          geometry={nodes.EssuisGlace.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Windshield_Sunshade"
          geometry={nodes.PareBrise_BriseSoleil.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Windshield_Seal"
          geometry={nodes.PareBrise_Joint.geometry}
          material={materials.matteplastic_midblack}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="Windshield_Glass"
          geometry={nodes.PareBrise_Verre.geometry}
          material={materials.windowglass}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_Valve"
          geometry={nodes.RoueAvantG_ChambreAir_Valve.geometry}
          material={materials.rubber}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_HubcapLogo"
          geometry={nodes.RoueAvantG_Enjoliveur_Logo.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_BrakeDisc"
          geometry={nodes.RoueAvantG_Frein_Disque.geometry}
          material={materials.brakedisc}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_BrakeCaliper"
          geometry={nodes.RoueAvantG_Frein_Machoir.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_Rim"
          geometry={nodes.RoueAvantG_Jante.geometry}
          material={materials.rimmatte}
          position={[0.879, 0.353, 1.541]}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_L_Tire"
          geometry={nodes.RoueAvantG_Pneu.geometry}
          material={materials.tire}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_Valve"
          geometry={nodes.RoueAvantD_ChambreAir_Valve.geometry}
          material={materials.rubber}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_HubcapLogo"
          geometry={nodes.RoueAvantD_Enjoliveur_Logo.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_BrakeDisc"
          geometry={nodes.RoueAvantD_Frein_Disque.geometry}
          material={materials.brakedisc}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_BrakeCaliper"
          geometry={nodes.RoueAvantD_Frein_Machoir.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_Rim"
          geometry={nodes.RoueAvantD_Jante.geometry}
          material={materials.rimmatte}
          position={[-0.861, 0.353, 1.541]}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="FrontWheel_R_Tire"
          geometry={nodes.RoueAvantD_Pneu.geometry}
          material={materials.tire}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_Valve"
          geometry={nodes.RoueArriereG_ChambreAir_Valve.geometry}
          material={materials.rubber}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_HubcapLogo"
          geometry={nodes.RoueArriereG_Enjoliveur_Logo.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_BrakeDisc"
          geometry={nodes.RoueArriereG_Frein_Disque.geometry}
          material={materials.brakedisc}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_BrakeCaliper"
          geometry={nodes.RoueArriereG_Frein_Machoir.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_Rim"
          geometry={nodes.RoueArriereG_Jante.geometry}
          material={materials.rimmatte}
          position={[0.879, 0.351, -1.53]}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_L_Tire"
          geometry={nodes.RoueArriereG_Pneu.geometry}
          material={materials.tire}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_Valve"
          geometry={nodes.RoueArriereD_ChambreAir_Valve.geometry}
          material={materials.rubber}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_HubcapLogo"
          geometry={nodes.RoueArriereD_Enjoliveur_Logo.geometry}
          material={materials.chrome}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_BrakeDisc"
          geometry={nodes.RoueArriereD_Frein_Disque.geometry}
          material={materials.brakedisc}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_BrakeCaliper"
          geometry={nodes.RoueArriereD_Frein_Machoir.geometry}
          material={materials.blackpaint_matte}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_Rim"
          geometry={nodes.RoueArriereD_Jante.geometry}
          material={materials.rimmatte}
          position={[-0.861, 0.351, -1.53]}
          rotation={[Math.PI / 2, 0, 0]} />
        <mesh
          name="RearWheel_R_Tire"
          geometry={nodes.RoueArriereD_Pneu.geometry}
          material={materials.tire}
          rotation={[Math.PI / 2, 0, 0]} />
      </group>
      {selectedObject && (
        <Html
          position={[0, 0, 0]} // Vous pouvez ajuster la position si nécessaire
          style={{ pointerEvents: 'auto' }} // Permettre les interactions avec la popup
        >
          <InspectionPopup
            objectName={selectedObject.name}
            status={objectStatus[selectedObject.name]}
            onClose={() => setSelectedObject(null)}
            onSubmit={handleStatusChange}
          />
        </Html>
      )}
    </>
  )
}
useGLTF.preload(`${import.meta.env.BASE_URL}models/renault-trafic-van.clean.glb`)
